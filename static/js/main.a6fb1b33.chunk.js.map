{"version":3,"sources":["logo.svg","components/Form.js","App.js","utils/displayCost.js","utils/calculateTripCount.js","utils/tripValidator.js","utils/calculateCost.js","serviceWorker.js","index.js"],"names":["module","exports","Form","onSubmit","useState","numberOfCorn","setNumberOfCorn","numberOfGeese","setNumberOfGeese","action","event","preventDefault","parseInt","type","min","required","onChange","currentTarget","value","App","pence","tripCount","numberOfItems","calculateTripCount","className","newCornNumber","newGeeseNumber","tripValidator","Fragment","Number","parseFloat","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,8GCG5B,SAASC,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SAAY,EACDC,mBAAS,GADR,mBAClCC,EADkC,KACpBC,EADoB,OAECF,mBAAS,GAFV,mBAElCG,EAFkC,KAEnBC,EAFmB,KAIzC,OACE,0BACEC,OAAO,IACPN,SAAU,SAACO,GACTA,EAAMC,iBAENR,EAASS,SAASP,EAAc,IAAKO,SAASL,EAAe,OAG/D,6BACE,wDAEE,2BACEM,KAAK,SACLC,IAAI,IACJC,UAAU,EACVC,SAAU,SAACN,GACTJ,EAAgBI,EAAMO,cAAcC,QAEtCA,MAAOb,MAIb,6BACE,iDAEE,2BACEQ,KAAK,SACLC,IAAI,IACJC,UAAU,EACVC,SAAU,SAACN,GACTF,EAAiBE,EAAMO,cAAcC,QAEvCA,MAAOX,MAIb,6BACE,4BAAQM,KAAK,UAAb,e,YCFOM,MAlCf,WAAgB,ICToBC,EDSrB,EAC2BhB,mBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAE6BF,mBAAS,GAFtC,mBAENG,EAFM,KAESC,EAFT,KAIPa,EEbO,SAA4BhB,EAAcE,GACvD,GACoB,IAAjBF,GAAwC,IAAlBE,GACL,IAAjBF,GAAwC,IAAlBE,EAEvB,OAAO,EAGT,IAAMe,EAAgBjB,EAAeE,EAErC,OAAOe,EAAgB,EAAoB,EAAhBA,EAAoB,EAAIA,EFGjCC,CAAmBlB,EAAcE,GAEnD,OACE,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAAlB,qCACA,6BAASA,UAAU,eACjB,kBAAC,EAAD,CACErB,SAAU,SAACsB,EAAeC,GACxBpB,EAAgBmB,GAChBjB,EAAiBkB,MAGrB,6BAASF,UAAU,eGzBZ,SAAuBnB,EAAcE,GAElD,OAAIF,GAAgB,GAAKE,GAAiB,IAItCF,GAAgB,GAAKE,GAAiB,IAItB,GAAhBF,GAAsC,GAAjBE,IHgBhBoB,CAActB,EAAcE,GAC3B,kBAAC,IAAMqB,SAAP,KACE,oDACA,0CACeP,EADf,6BACoD,IAClD,+BC/BoBD,EGCT,GJ8BsBC,EC9BvC,OAAN,OAAWQ,OAAOC,WAAWV,EAAM,KAAKW,QAAQ,QDkCxC,kBAAC,IAAMH,SAAP,qCKvBQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a6fb1b33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport \"./Form.css\";\n\nexport default function Form({ onSubmit }) {\n  const [numberOfCorn, setNumberOfCorn] = useState(0);\n  const [numberOfGeese, setNumberOfGeese] = useState(0);\n\n  return (\n    <form\n      action=\"#\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        onSubmit(parseInt(numberOfCorn, 10), parseInt(numberOfGeese, 10));\n      }}\n    >\n      <div>\n        <label>\n          Number of bags of corn\n          <input\n            type=\"number\"\n            min=\"0\"\n            required={true}\n            onChange={(event) => {\n              setNumberOfCorn(event.currentTarget.value);\n            }}\n            value={numberOfCorn}\n          />\n        </label>\n      </div>\n      <div>\n        <label>\n          Number of geese\n          <input\n            type=\"number\"\n            min=\"0\"\n            required={true}\n            onChange={(event) => {\n              setNumberOfGeese(event.currentTarget.value);\n            }}\n            value={numberOfGeese}\n          />\n        </label>\n      </div>\n      <div>\n        <button type=\"submit\">Calculate</button>\n      </div>\n    </form>\n  );\n}\n","import React, { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport calculateTripCount from \"./utils/calculateTripCount\";\nimport calculateCost from \"./utils/calculateCost\";\nimport displayCost from \"./utils/displayCost\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport tripValidator from \"./utils/tripValidator\";\n\nfunction App() {\n  const [numberOfCorn, setNumberOfCorn] = useState(0);\n  const [numberOfGeese, setNumberOfGeese] = useState(0);\n\n  const tripCount = calculateTripCount(numberOfCorn, numberOfGeese);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">ðŸŒ½ Corn Trip Calculator</header>\n      <section className=\"App-section\">\n        <Form\n          onSubmit={(newCornNumber, newGeeseNumber) => {\n            setNumberOfCorn(newCornNumber);\n            setNumberOfGeese(newGeeseNumber);\n          }}\n        />\n        <section className=\"App-section\">\n          {tripValidator(numberOfCorn, numberOfGeese) ? (\n            <React.Fragment>\n              <p>The trip is possible.</p>\n              <p>\n                You require {tripCount} trips and these will cost{\" \"}\n                <span>{displayCost(calculateCost(tripCount))}</span>\n              </p>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>The trip is not possible</React.Fragment>\n          )}\n        </section>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","export default function displayCost(pence) {\n    return `Â£${Number.parseFloat(pence/100).toFixed(2)}`\n}","export default function calculateTripCount(numberOfCorn, numberOfGeese) {\n  if (\n    (numberOfCorn === 1 && numberOfGeese === 2) ||\n    (numberOfCorn === 2 && numberOfGeese === 1)\n  ) {\n    return 7;\n  }\n\n  const numberOfItems = numberOfCorn + numberOfGeese;\n\n  return numberOfItems > 1 ? numberOfItems * 2 - 1 : numberOfItems;\n}\n","export default function tripValidator(numberOfCorn, numberOfGeese) {\n    \n  if (numberOfCorn <= 2 && numberOfGeese <= 1) {\n    return true;\n  }\n\n  if (numberOfCorn <= 1 && numberOfGeese <= 2) {\n    return true;\n  }\n\n  if (numberOfCorn == 0 || numberOfGeese == 0) {\n    return true;\n  }\n\n  return false;\n}\n","export default function calculateCost(numberOfTrips) {\n    return numberOfTrips * 25\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}